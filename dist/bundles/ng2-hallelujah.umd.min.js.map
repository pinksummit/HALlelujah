{"version":3,"file":"ng2-hallelujah.umd.min.js","sources":["~/ng2-hallelujah/src/hallelujah.module.ts","~/ng2-hallelujah/src/entity.ts","~/ng2-hallelujah/src/page.ts","~/ng2-hallelujah/src/entity-helper.ts","~/ng2-hallelujah/src/references.ts","~/ng2-hallelujah/src/api.service.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n    imports: [HttpClientModule],\n    declarations: [],\n    exports: [HttpClientModule],\n    providers: [HttpClient]\n})\nexport class HallelujahModule {\n}","import {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {EntityHelper} from './entity-helper';\nimport {RelatedCollectionRef, RelatedEntityRef} from './references';\n\nexport abstract class Entity {\n\n  http: HttpClient;\n  _links: any;\n\n  constructor() {\n  }\n\n\n  relatedCollection(name: string): RelatedCollectionRef {\n    if (this._links[name]) {\n      return new RelatedCollectionRef(EntityHelper.stripTemplatedUrl(this._links[name].href), this.http);\n    } else {\n      throw new Error('Link ' + name + ' does not exist!');\n    }\n  }\n\n  relatedEntity(name: string): RelatedEntityRef {\n    if (this._links[name]) {\n      return new RelatedEntityRef(EntityHelper.stripTemplatedUrl(this._links[name].href), this.http);\n    } else {\n      throw new Error('Link ' + name + ' does not exist!');\n    }\n  }\n\n  save(): Observable<void> {\n    if (this._links.self) {\n      return this.http.put<void>(EntityHelper.stripTemplatedUrl(this._links.self.href),\n        EntityHelper.transformForUpdate(this));\n    } else {\n      throw new Error('Entity not initialised');\n    }\n  }\n\n  update(object: Object): Observable<void> {\n    if (this._links.self) {\n      return this.http.patch<void>(EntityHelper.stripTemplatedUrl(this._links.self.href), EntityHelper.transformForUpdate(object));\n    } else {\n      throw new Error('Entity not initialised');\n    }\n  }\n\n}\n","import {Observable} from 'rxjs/Observable';\nimport {EntityHelper} from './entity-helper';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Entity} from './entity';\nimport {Sort} from './references';\n\nexport class Page<E extends Entity> {\n\n  totalPages = 1;\n  totalItems = 0;\n  pageNumber = 0;\n  size: 0;\n  sorting: Sort[] = [];\n\n  items: E[] = [];\n\n  nextUrl: string;\n  prevUrl: string;\n  firstUrl: string;\n  lastUrl: string;\n  selfUrl: string;\n  selfUrlWithoutPageParam: string;\n\n  constructor(private type: { new(): E }, private http: HttpClient) {\n  }\n\n  next(): Observable<Page<E>> {\n    if (this.nextUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No next page available');\n    }\n  }\n\n  prev(): Observable<Page<E>> {\n    if (this.prevUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No previous page available');\n    }\n  }\n\n  first(): Observable<Page<E>> {\n    if (this.firstUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No first page available');\n    }\n  }\n\n  last(): Observable<Page<E>> {\n    if (this.lastUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No last page available');\n    }\n  }\n\n  /**\n   * Functionalities to be added in next version\n   *\n   page(nr: number): Observable<Page<E>> {\n    const httpParams = this.sortParams().append('size', this.size.toString()).append('page', nr.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n   resize(size: number): Observable<Page<E>> {\n    const httpParams = this.sortParams().append('size', size.toString()).append('page', this.pageNumber.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n   sort(sort: Sort, reset = false): Observable<Page<E>> {\n    if(reset){\n      this.sorting = [];\n    }else {\n      this.sorting = this.sorting.filter( _sort => !(_sort.property === sort.property));\n    }\n    this.sorting.push(sort);\n    const httpParams = this.sortParams().append('size', this.size.toString()).append('page', this.pageNumber.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map<Object, Page<E>>(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n\n\n   private sortParams(): HttpParams {\n    let httpParams = new HttpParams();\n    this.sorting.forEach(sort => httpParams = httpParams.append('sort', sort.property + ',' +sort.order));\n    return httpParams;\n  }\n\n   private baseUrl(): string{\n    return this.selfUrl.substring(0,this.selfUrl.indexOf('?'));\n  }\n\n   **/\n}\n\n\n","import {HttpClient, HttpParams} from '@angular/common/http';\nimport {Entity} from './entity';\nimport {Page} from './page';\n\nexport class EntityHelper {\n\n  static transformForUpdate(object: Object): Object {\n    const result: any = {};\n    for (const key in object) {\n      if (object[key] instanceof Entity) {\n        result[key] = EntityHelper.stripTemplatedUrl(object[key]['_links']['self']['href']);\n      } else if (object[key] !== '_links') {\n        result[key] = object[key];\n      }\n    }\n    return result as Object;\n  }\n\n  static initEntity<E extends Entity>(type: { new(): E }, payload: Object, http: HttpClient): E {\n    const entity = new type();\n    for (const p in payload) {\n      entity[p] = payload[p];\n    }\n    entity.http = http;\n    return entity;\n  }\n\n  static initEntityCollection<E extends Entity>(type: { new(): E }, payload: any, http: HttpClient): E[] {\n    return payload._embedded[Object.keys(payload['_embedded'])[0]]\n      .map(item => EntityHelper.initEntity(type, item, http));\n\n  }\n\n  static initPage<E extends Entity>(type: { new(): E }, payload: any, http: HttpClient): Page<E> {\n    const page = new Page(type, http);\n    page.items = EntityHelper.initEntityCollection(type, payload, http);\n    page.totalItems = payload.page ? payload.page.totalElements : page.items.length;\n    page.totalPages = payload.page ? payload.page.totalPages : 1;\n    page.pageNumber = payload.page ? payload.page.number : 1;\n    page.selfUrl = payload._links.self ? EntityHelper.stripTemplatedUrl(payload._links.self.href) : undefined;\n    page.nextUrl = payload._links.next ? EntityHelper.stripTemplatedUrl(payload._links.next.href) : undefined;\n    page.prevUrl = payload._links.prev ? EntityHelper.stripTemplatedUrl(payload._links.prev.href) : undefined;\n    page.firstUrl = payload._links.first ? EntityHelper.stripTemplatedUrl(payload._links.first.href) : undefined;\n    page.lastUrl = payload._links.last ? EntityHelper.stripTemplatedUrl(payload._links.last.href) : undefined;\n    return page;\n  }\n\n  static stripTemplatedUrl(url: string): string {\n    return url.split('{').shift();\n  }\n\n  static addHttpParamsToUrl(url: string, params: HttpParams): string {\n    let _url = url;\n    if (!url.includes('?')) {\n      _url = _url.concat('?');\n    }\n    return _url.concat(params.toString());\n  }\n}\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs/Observable';\nimport {EntityHelper} from './entity-helper';\nimport {Page} from './page';\nimport {Entity} from './entity';\n\nexport class CollectionRef {\n\n  constructor(private url: string, private http: HttpClient) {\n  }\n\n  entity(id: any): EntityRef {\n    return new EntityRef(this.extendUrl(id), this.http);\n  }\n\n  filter(query: string): FilteredCollectionRef {\n    return new FilteredCollectionRef(this.extendUrl(query), this.http);\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n\n  add(entity: Object): Observable<any> {\n    return this.http.post(this.url, EntityHelper.transformForUpdate(entity));\n  }\n\n  remove<E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.delete<void>(entity._links.self.href);\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n\n  paginate(size?: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(this.url, size, this.http);\n  }\n\n\n  private extendUrl(part?: any): string {\n    let _url = this.url;\n    if (!_url.endsWith('/')) {\n      _url = _url.concat('/');\n    }\n    if (part) {\n      return _url.concat(part);\n    }\n    return _url;\n  }\n}\n\nexport class FilteredCollectionRef {\n\n  private queryParams: HttpParams = new HttpParams();\n\n  constructor(private url: string, private http: HttpClient) {\n  }\n\n  queryParam(param: QueryParam, reset = false): FilteredCollectionRef {\n    if (reset) {\n      this.queryParams = new HttpParams();\n    }\n    this.queryParams = this.queryParams.append(param.key, param.value);\n    return this;\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url, {params: this.queryParams})\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n\n  paginate(size?: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(EntityHelper.addHttpParamsToUrl(this.url, this.queryParams), size, this.http);\n  }\n\n}\n\nexport class PaginatedCollectionRef {\n\n  private sorting = new HttpParams();\n  private sizeParam = new HttpParams();\n\n  constructor(private url: string, private size: number, private http: HttpClient) {\n    if (size) {\n      this.sizeParam = this.sizeParam.append('size', size.toString());\n    }\n  }\n\n  sort(sort: Sort): PaginatedCollectionRef {\n    this.sorting = this.sorting.append(sort.property, sort.order);\n    return this;\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<Page<E>> {\n    const params = this.size ? this.sorting.append('size', this.size.toString()) : this.sorting;\n    return this.http.get<Object>(this.url, {params: params})\n      .map<Object, Page<E>>(data => EntityHelper.initPage(type, data, this.http));\n  }\n}\n\nexport class EntityRef {\n\n  constructor(private url: string, private http: HttpClient) {\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<E> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E>(data => EntityHelper.initEntity(type, data, this.http));\n  }\n}\n\nexport class RelatedCollectionRef {\n\n  constructor(private url: string, private http: HttpClient) {\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n\n  paginate(size: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(this.url, size, this.http);\n  }\n\n  add<E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.post<void>(this.url, entity._links.self.href, {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n\n  set <E extends Entity>(entities: E[]): Observable<void> {\n    if (entities.every(entity => entity._links.self)) {\n      const urls: string[] = entities.map<string>(entity => entity._links.self.href);\n      return this.http.put<void>(this.url, urls.join('\\n'), {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n\n  setNull(): Observable<void> {\n    return this.http.delete<void>(this.url);\n  }\n\n}\n\nexport class RelatedEntityRef {\n\n  constructor(private url: string, private http: HttpClient) {\n  }\n\n  get <E extends Entity>(type: { new(): E }): Observable<E> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E>(data => EntityHelper.initEntity(type, data, this.http));\n  }\n\n  set <E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.put<void>(this.url, entity._links.self.href, {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n\n  setNull(): Observable<void> {\n    return this.http.delete<void>(this.url);\n  }\n\n}\n\nexport interface QueryParam {\n  key: string;\n  value: string;\n}\n\nexport interface Sort {\n  property: string;\n  order?: 'asc' | 'desc';\n}\n","import {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {CollectionRef, EntityRef} from './references';\n\nexport let API_URL = new InjectionToken('api.uri');\n\n@Injectable()\nexport class ApiService {\n\n  constructor(@Inject(API_URL) private api_url: string, private http: HttpClient) {\n  }\n\n  collection(name: string): CollectionRef {\n    return new CollectionRef(this.getUrl(name), this.http);\n  }\n\n  entity(url: string): EntityRef {\n    return new EntityRef(url, this.http);\n  }\n\n  private getUrl(collection?: string): string {\n    let url = this.api_url;\n    if (!url.endsWith('/')) {\n      url = url.concat('/');\n    }\n    if (collection) {\n      return url.concat(collection);\n    }\n    return url;\n  }\n\n}\n"],"names":["HallelujahModule","decorators","type","NgModule","args","imports","HttpClientModule","declarations","exports","providers","HttpClient","ctorParameters","Entity","prototype","relatedCollection","name","this","_links","RelatedCollectionRef","EntityHelper","stripTemplatedUrl","href","http","Error","relatedEntity","RelatedEntityRef","save","self","put","transformForUpdate","update","object","patch","Page","totalPages","totalItems","pageNumber","sorting","items","next","_this","nextUrl","get","map","data","initPage","Observable","throw","prev","prevUrl","first","firstUrl","last","lastUrl","result","key","initEntity","payload","entity","p","initEntityCollection","_embedded","Object","keys","item","page","totalElements","length","number","selfUrl","undefined","url","split","shift","addHttpParamsToUrl","params","_url","includes","concat","toString","CollectionRef","id","EntityRef","extendUrl","filter","query","FilteredCollectionRef","add","post","remove","delete","paginate","size","PaginatedCollectionRef","part","endsWith","queryParams","HttpParams","queryParam","param","reset","append","value","sizeParam","sort","property","order","headers","HttpHeaders","set","entities","every","urls","join","setNull","API_URL","InjectionToken","ApiService","api_url","collection","getUrl","Injectable","Inject"],"mappings":"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"}
