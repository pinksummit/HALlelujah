{
  "version": 3,
  "file": "ng2-hallelujah.js",
  "sources": [
    "ts/ng2-hallelujah.ts",
    "ts/public_api.ts",
    "ts/src/api.service.ts",
    "ts/src/references.ts",
    "ts/src/entity-helper.ts",
    "ts/src/page.ts",
    "ts/src/entity.ts",
    "ts/src/hallelujah.module.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport {HallelujahModule,API_URL,ApiService,Entity,EntityHelper,Page,CollectionRef,FilteredCollectionRef,PaginatedCollectionRef,EntityRef,RelatedCollectionRef,RelatedEntityRef,QueryParam,Sort} from './public_api';\n",
    "/* SystemJS module definition */\n\n\nexport {HallelujahModule} from './src/hallelujah.module';\nexport {API_URL,ApiService} from './src/api.service';\nexport {Entity} from './src/entity';\nexport {EntityHelper} from './src/entity-helper';\nexport {Page} from './src/page';\nexport {CollectionRef,FilteredCollectionRef,PaginatedCollectionRef,EntityRef,RelatedCollectionRef,RelatedEntityRef,QueryParam,Sort} from './src/references';\n",
    "import {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {CollectionRef, EntityRef} from './references';\n\nexport let /** @type {?} */ API_URL = new InjectionToken('api.uri');\nexport class ApiService {\n/**\n * @param {?} api_url\n * @param {?} http\n */\nconstructor(\nprivate api_url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ncollection(name: string): CollectionRef {\n    return new CollectionRef(this.getUrl(name), this.http);\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nentity(url: string): EntityRef {\n    return new EntityRef(url, this.http);\n  }\n/**\n * @param {?=} collection\n * @return {?}\n */\nprivate getUrl(collection?: string): string {\n    let /** @type {?} */ url = this.api_url;\n    if (!url.endsWith('/')) {\n      url = url.concat('/');\n    }\n    if (collection) {\n      return url.concat(collection);\n    }\n    return url;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [API_URL, ] }, ]},\n{type: HttpClient, },\n];\n}\n\nfunction ApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nApiService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApiService.ctorParameters;\n/** @type {?} */\nApiService.prototype.api_url;\n/** @type {?} */\nApiService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs/Observable';\nimport {EntityHelper} from './entity-helper';\nimport {Page} from './page';\nimport {Entity} from './entity';\nexport class CollectionRef {\n/**\n * @param {?} url\n * @param {?} http\n */\nconstructor(private url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nentity(id: any): EntityRef {\n    return new EntityRef(this.extendUrl(id), this.http);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\nfilter(query: string): FilteredCollectionRef {\n    return new FilteredCollectionRef(this.extendUrl(query), this.http);\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n/**\n * @param {?} entity\n * @return {?}\n */\nadd(entity: Object): Observable<any> {\n    return this.http.post(this.url, EntityHelper.transformForUpdate(entity));\n  }\n/**\n * @template E\n * @param {?} entity\n * @return {?}\n */\nremove<E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.delete<void>(entity._links.self.href);\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n/**\n * @param {?=} size\n * @return {?}\n */\npaginate(size?: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(this.url, size, this.http);\n  }\n/**\n * @param {?=} part\n * @return {?}\n */\nprivate extendUrl(part?: any): string {\n    let /** @type {?} */ _url = this.url;\n    if (!_url.endsWith('/')) {\n      _url = _url.concat('/');\n    }\n    if (part) {\n      return _url.concat(part);\n    }\n    return _url;\n  }\n}\n\nfunction CollectionRef_tsickle_Closure_declarations() {\n/** @type {?} */\nCollectionRef.prototype.url;\n/** @type {?} */\nCollectionRef.prototype.http;\n}\n\nexport class FilteredCollectionRef {\nprivate queryParams: HttpParams = new HttpParams();\n/**\n * @param {?} url\n * @param {?} http\n */\nconstructor(private url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} param\n * @param {?=} reset\n * @return {?}\n */\nqueryParam(param: QueryParam, reset = false): FilteredCollectionRef {\n    if (reset) {\n      this.queryParams = new HttpParams();\n    }\n    this.queryParams = this.queryParams.append(param.key, param.value);\n    return this;\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url, {params: this.queryParams})\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n/**\n * @param {?=} size\n * @return {?}\n */\npaginate(size?: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(EntityHelper.addHttpParamsToUrl(this.url, this.queryParams), size, this.http);\n  }\n\n}\n\nfunction FilteredCollectionRef_tsickle_Closure_declarations() {\n/** @type {?} */\nFilteredCollectionRef.prototype.queryParams;\n/** @type {?} */\nFilteredCollectionRef.prototype.url;\n/** @type {?} */\nFilteredCollectionRef.prototype.http;\n}\n\nexport class PaginatedCollectionRef {\nprivate sorting = new HttpParams();\nprivate sizeParam = new HttpParams();\n/**\n * @param {?} url\n * @param {?} size\n * @param {?} http\n */\nconstructor(private url: string,\nprivate size: number,\nprivate http: HttpClient) {\n    if (size) {\n      this.sizeParam = this.sizeParam.append('size', size.toString());\n    }\n  }\n/**\n * @param {?} sort\n * @return {?}\n */\nsort(sort: Sort): PaginatedCollectionRef {\n    this.sorting = this.sorting.append(sort.property, sort.order);\n    return this;\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<Page<E>> {\n    const /** @type {?} */ params = this.size ? this.sorting.append('size', this.size.toString()) : this.sorting;\n    return this.http.get<Object>(this.url, {params: params})\n      .map<Object, Page<E>>(data => EntityHelper.initPage(type, data, this.http));\n  }\n}\n\nfunction PaginatedCollectionRef_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatedCollectionRef.prototype.sorting;\n/** @type {?} */\nPaginatedCollectionRef.prototype.sizeParam;\n/** @type {?} */\nPaginatedCollectionRef.prototype.url;\n/** @type {?} */\nPaginatedCollectionRef.prototype.size;\n/** @type {?} */\nPaginatedCollectionRef.prototype.http;\n}\n\nexport class EntityRef {\n/**\n * @param {?} url\n * @param {?} http\n */\nconstructor(private url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<E> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E>(data => EntityHelper.initEntity(type, data, this.http));\n  }\n}\n\nfunction EntityRef_tsickle_Closure_declarations() {\n/** @type {?} */\nEntityRef.prototype.url;\n/** @type {?} */\nEntityRef.prototype.http;\n}\n\nexport class RelatedCollectionRef {\n/**\n * @param {?} url\n * @param {?} http\n */\nconstructor(private url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<E[]> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E[]>(data => EntityHelper.initEntityCollection(type, data, this.http));\n  }\n/**\n * @param {?} size\n * @return {?}\n */\npaginate(size: number): PaginatedCollectionRef {\n    return new PaginatedCollectionRef(this.url, size, this.http);\n  }\n/**\n * @template E\n * @param {?} entity\n * @return {?}\n */\nadd<E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.post<void>(this.url, entity._links.self.href, {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n/**\n * @template E\n * @param {?} entities\n * @return {?}\n */\nset <E extends Entity>(entities: E[]): Observable<void> {\n    if (entities.every(entity => entity._links.self)) {\n      const /** @type {?} */ urls: string[] = entities.map<string>(entity => entity._links.self.href);\n      return this.http.put<void>(this.url, urls.join('\\n'), {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n/**\n * @return {?}\n */\nsetNull(): Observable<void> {\n    return this.http.delete<void>(this.url);\n  }\n\n}\n\nfunction RelatedCollectionRef_tsickle_Closure_declarations() {\n/** @type {?} */\nRelatedCollectionRef.prototype.url;\n/** @type {?} */\nRelatedCollectionRef.prototype.http;\n}\n\nexport class RelatedEntityRef {\n/**\n * @param {?} url\n * @param {?} http\n */\nconstructor(private url: string,\nprivate http: HttpClient) {\n  }\n/**\n * @template E\n * @param {?} type\n * @return {?}\n */\nget <E extends Entity>(type: { new(): E }): Observable<E> {\n    return this.http.get<Object>(this.url)\n      .map<Object, E>(data => EntityHelper.initEntity(type, data, this.http));\n  }\n/**\n * @template E\n * @param {?} entity\n * @return {?}\n */\nset <E extends Entity>(entity: E): Observable<void> {\n    if (entity._links.self) {\n      return this.http.put<void>(this.url, entity._links.self.href, {headers: new HttpHeaders().set('Content-Type', 'text/uri-list')});\n    } else {\n      return Observable.throw('Entity not initialised');\n    }\n  }\n/**\n * @return {?}\n */\nsetNull(): Observable<void> {\n    return this.http.delete<void>(this.url);\n  }\n\n}\n\nfunction RelatedEntityRef_tsickle_Closure_declarations() {\n/** @type {?} */\nRelatedEntityRef.prototype.url;\n/** @type {?} */\nRelatedEntityRef.prototype.http;\n}\n\n\nexport interface QueryParam {\n  key: string;\n  value: string;\n}\n\nexport interface Sort {\n  property: string;\n  order?: 'asc' | 'desc';\n}\n",
    "import {HttpClient, HttpParams} from '@angular/common/http';\nimport {Entity} from './entity';\nimport {Page} from './page';\nexport class EntityHelper {\n/**\n * @param {?} object\n * @return {?}\n */\nstatic transformForUpdate(object: Object): Object {\n    const /** @type {?} */ result: any = {};\n    for (const /** @type {?} */ key in object) {\n      if (object[key] instanceof Entity) {\n        result[key] = EntityHelper.stripTemplatedUrl(object[key]['_links']['self']['href']);\n      } else if (object[key] !== '_links') {\n        result[key] = object[key];\n      }\n    }\n    return /** @type {?} */(( result as Object));\n  }\n/**\n * @template E\n * @param {?} type\n * @param {?} payload\n * @param {?} http\n * @return {?}\n */\nstatic initEntity<E extends Entity>(type: { new(): E }, payload: Object, http: HttpClient): E {\n    const /** @type {?} */ entity = new type();\n    for (const /** @type {?} */ p in payload) {\n      entity[p] = payload[p];\n    }\n    entity.http = http;\n    return entity;\n  }\n/**\n * @template E\n * @param {?} type\n * @param {?} payload\n * @param {?} http\n * @return {?}\n */\nstatic initEntityCollection<E extends Entity>(type: { new(): E }, payload: any, http: HttpClient): E[] {\n    return payload._embedded[Object.keys(payload['_embedded'])[0]]\n      .map(item => EntityHelper.initEntity(type, item, http));\n\n  }\n/**\n * @template E\n * @param {?} type\n * @param {?} payload\n * @param {?} http\n * @return {?}\n */\nstatic initPage<E extends Entity>(type: { new(): E }, payload: any, http: HttpClient): Page<E> {\n    const /** @type {?} */ page = new Page(type, http);\n    page.items = EntityHelper.initEntityCollection(type, payload, http);\n    page.totalItems = payload.page ? payload.page.totalElements : page.items.length;\n    page.totalPages = payload.page ? payload.page.totalPages : 1;\n    page.pageNumber = payload.page ? payload.page.number : 1;\n    page.selfUrl = payload._links.self ? EntityHelper.stripTemplatedUrl(payload._links.self.href) : undefined;\n    page.nextUrl = payload._links.next ? EntityHelper.stripTemplatedUrl(payload._links.next.href) : undefined;\n    page.prevUrl = payload._links.prev ? EntityHelper.stripTemplatedUrl(payload._links.prev.href) : undefined;\n    page.firstUrl = payload._links.first ? EntityHelper.stripTemplatedUrl(payload._links.first.href) : undefined;\n    page.lastUrl = payload._links.last ? EntityHelper.stripTemplatedUrl(payload._links.last.href) : undefined;\n    return page;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nstatic stripTemplatedUrl(url: string): string {\n    return url.split('{').shift();\n  }\n/**\n * @param {?} url\n * @param {?} params\n * @return {?}\n */\nstatic addHttpParamsToUrl(url: string, params: HttpParams): string {\n    let /** @type {?} */ _url = url;\n    if (!url.includes('?')) {\n      _url = _url.concat('?');\n    }\n    return _url.concat(params.toString());\n  }\n}\n",
    "import {Observable} from 'rxjs/Observable';\nimport {EntityHelper} from './entity-helper';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Entity} from './entity';\nimport {Sort} from './references';\nexport class Page<E extends Entity> {\n\n  totalPages = 1;\n  totalItems = 0;\n  pageNumber = 0;\n  size: 0;\n  sorting: Sort[] = [];\n\n  items: E[] = [];\n\n  nextUrl: string;\n  prevUrl: string;\n  firstUrl: string;\n  lastUrl: string;\n  selfUrl: string;\n  selfUrlWithoutPageParam: string;\n/**\n * @param {?} type\n * @param {?} http\n */\nconstructor(private type: { new(): E },\nprivate http: HttpClient) {\n  }\n/**\n * @return {?}\n */\nnext(): Observable<Page<E>> {\n    if (this.nextUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No next page available');\n    }\n  }\n/**\n * @return {?}\n */\nprev(): Observable<Page<E>> {\n    if (this.prevUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No previous page available');\n    }\n  }\n/**\n * @return {?}\n */\nfirst(): Observable<Page<E>> {\n    if (this.firstUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No first page available');\n    }\n  }\n/**\n * @return {?}\n */\nlast(): Observable<Page<E>> {\n    if (this.lastUrl) {\n      return this.http.get(this.nextUrl)\n        .map(data => EntityHelper.initPage(this.type, data, this.http));\n    } else {\n      return Observable.throw('No last page available');\n    }\n  }\n\n  /**\n   * Functionalities to be added in next version\n   *\n   page(nr: number): Observable<Page<E>> {\n    const httpParams = this.sortParams().append('size', this.size.toString()).append('page', nr.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n   resize(size: number): Observable<Page<E>> {\n    const httpParams = this.sortParams().append('size', size.toString()).append('page', this.pageNumber.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n   sort(sort: Sort, reset = false): Observable<Page<E>> {\n    if(reset){\n      this.sorting = [];\n    }else {\n      this.sorting = this.sorting.filter( _sort => !(_sort.property === sort.property));\n    }\n    this.sorting.push(sort);\n    const httpParams = this.sortParams().append('size', this.size.toString()).append('page', this.pageNumber.toString());\n    return this.http.get(this.baseUrl(), {params: httpParams})\n      .map<Object, Page<E>>(data => EntityHelper.initPage(this.type, data, this.http));\n  }\n\n\n\n   private sortParams(): HttpParams {\n    let httpParams = new HttpParams();\n    this.sorting.forEach(sort => httpParams = httpParams.append('sort', sort.property + ',' +sort.order));\n    return httpParams;\n  }\n\n   private baseUrl(): string{\n    return this.selfUrl.substring(0,this.selfUrl.indexOf('?'));\n  }\n\n   **/\n}\n\nfunction Page_tsickle_Closure_declarations() {\n/** @type {?} */\nPage.prototype.totalPages;\n/** @type {?} */\nPage.prototype.totalItems;\n/** @type {?} */\nPage.prototype.pageNumber;\n/** @type {?} */\nPage.prototype.size;\n/** @type {?} */\nPage.prototype.sorting;\n/** @type {?} */\nPage.prototype.items;\n/** @type {?} */\nPage.prototype.nextUrl;\n/** @type {?} */\nPage.prototype.prevUrl;\n/** @type {?} */\nPage.prototype.firstUrl;\n/** @type {?} */\nPage.prototype.lastUrl;\n/** @type {?} */\nPage.prototype.selfUrl;\n/** @type {?} */\nPage.prototype.selfUrlWithoutPageParam;\n/** @type {?} */\nPage.prototype.type;\n/** @type {?} */\nPage.prototype.http;\n}\n\n\n\n",
    "import {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/catch';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {EntityHelper} from './entity-helper';\nimport {RelatedCollectionRef, RelatedEntityRef} from './references';\n/**\n * @abstract\n */\nexport abstract class Entity {\n\n  http: HttpClient;\n  _links: any;\nconstructor() {\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nrelatedCollection(name: string): RelatedCollectionRef {\n    if (this._links[name]) {\n      return new RelatedCollectionRef(EntityHelper.stripTemplatedUrl(this._links[name].href), this.http);\n    } else {\n      throw new Error('Link ' + name + ' does not exist!');\n    }\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nrelatedEntity(name: string): RelatedEntityRef {\n    if (this._links[name]) {\n      return new RelatedEntityRef(EntityHelper.stripTemplatedUrl(this._links[name].href), this.http);\n    } else {\n      throw new Error('Link ' + name + ' does not exist!');\n    }\n  }\n/**\n * @return {?}\n */\nsave(): Observable<void> {\n    if (this._links.self) {\n      return this.http.put<void>(EntityHelper.stripTemplatedUrl(this._links.self.href),\n        EntityHelper.transformForUpdate(this));\n    } else {\n      throw new Error('Entity not initialised');\n    }\n  }\n/**\n * @param {?} object\n * @return {?}\n */\nupdate(object: Object): Observable<void> {\n    if (this._links.self) {\n      return this.http.patch<void>(EntityHelper.stripTemplatedUrl(this._links.self.href), EntityHelper.transformForUpdate(object));\n    } else {\n      throw new Error('Entity not initialised');\n    }\n  }\n\n}\n\nfunction Entity_tsickle_Closure_declarations() {\n/** @type {?} */\nEntity.prototype.http;\n/** @type {?} */\nEntity.prototype._links;\n}\n\n",
    "import {NgModule} from '@angular/core';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nexport class HallelujahModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [HttpClientModule],\n    declarations: [],\n    exports: [HttpClientModule],\n    providers: [HttpClient]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HallelujahModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHallelujahModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHallelujahModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"
  ],
  "names": [
    "http",
    "Observable"
  ],
  "mappings": "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"
}
